<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             version="1.0">
  <module_parameters>
    <parameters  id="combodo-anonymizer" _delta="define">
      <caselog_content type="array">
        <field id="0">friendlyname</field>
        <field id="1">email</field>
        <field id="2">name</field>
      </caselog_content>
      <onmention>trigger-only</onmention>
      <notification_content type="array">
        <field id="0">friendlyname</field>
        <field id="1">email</field>
        <field id="2">name</field>
      </notification_content>
    </parameters>
  </module_parameters>
  <constants>
  </constants>
  <classes>
    <class id="RessourceAnonymization" _delta="define">
      <parent>AbstractResource</parent>
      <properties>
        <comment>/* Anonymization menu access control. */</comment>
        <abstract>true</abstract>
        <category>grant_by_profile</category>
      </properties>
      <presentation/>
      <methods/>
    </class>
    <class id="BatchAnonymization" _delta="define">
      <parent>DBObject</parent>
      <properties>
        <category></category>
        <abstract>false</abstract>
        <db_table>priv_batch_anonymization</db_table>
        <naming>
          <format>%1$s %2$s</format>
          <attributes>
            <attribute id="classToAnonymize"/>
            <attribute id="idToAnonymize"/>
          </attributes>
        </naming>
      </properties>
      <fields>
        <field id="classToAnonymize" xsi:type="AttributeString">
          <sql>classToAnonymize</sql>
          <default_value></default_value>
          <is_null_allowed>false</is_null_allowed>
          <tracking_level>none</tracking_level>
        </field>
        <field id="idToAnonymize" xsi:type="AttributeInteger">
          <sql>idToAnonymize</sql>
          <default_value></default_value>
          <is_null_allowed>false</is_null_allowed>
          <tracking_level>none</tracking_level>
        </field>
        <field id="idUserToAnonymize" xsi:type="AttributeInteger">
          <sql>idUserToAnonymize</sql>
          <default_value></default_value>
          <is_null_allowed>true</is_null_allowed>
          <tracking_level>none</tracking_level>
        </field>
        <field id="emailToAnonymize" xsi:type="AttributeString">
          <sql>emailToAnonymize</sql>
          <default_value></default_value>
          <is_null_allowed>true</is_null_allowed>
          <tracking_level>none</tracking_level>
        </field>
        <field id="friendlynameToAnonymize" xsi:type="AttributeString">
          <sql>friendlynameToAnonymize</sql>
          <default_value></default_value>
          <is_null_allowed>false</is_null_allowed>
          <tracking_level>none</tracking_level>
        </field>
        <field id="anonymizedFriendlyname" xsi:type="AttributeString">
          <sql>anonymizedFriendlyname</sql>
          <default_value></default_value>
          <is_null_allowed>false</is_null_allowed>
          <tracking_level>none</tracking_level>
        </field>
        <field id="nameToAnonymize" xsi:type="AttributeString">
          <sql>nameToAnonymize</sql>
          <default_value></default_value>
          <is_null_allowed>false</is_null_allowed>
          <tracking_level>none</tracking_level>
        </field>
        <field id="function" xsi:type="AttributeText">
          <sql>function</sql>
          <default_value></default_value>
          <is_null_allowed>false</is_null_allowed>
          <tracking_level>none</tracking_level>
        </field>
      </fields>
      <methods>
        <method id="executeStep" _delta="define">
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
        public function executeStep($iTimeLimit){
           switch ($this->Get('function')) {
              case 'PurgeHistoryByBatch':
                return $this->PurgeHistoryByBatch( $iTimeLimit);
              break;
              case 'CleanupCaseLogsByBatch':
                return $this->CleanupCaseLogsByBatch( $iTimeLimit);
              break;
              case 'CleanupOnMentionByBatch':
                return $this->CleanupOnMentionByBatch( $iTimeLimit);
              break;
              case 'CleanupEmailByBatch':
                return $this->CleanupEmailByBatch( $iTimeLimit);
              break;
              default:
            return false;
            }
        }
        ]]></code>
        </method>
        <method id="executeQueryByLot" _delta="define">
          <static>true</static>
          <access>protected</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
        protected static function executeQueryByLot($sSqlSearch, $sSqlUpdate, $iTimeLimit){
            $iMaxBufferSize =   MetaModel::GetConfig()->GetModuleSetting('combodo-anonymizer', 'max_buffer_size', 1000);
            $aObjects = [] ;
	          $bExecuteQuery = true;
            while ($bExecuteQuery) {
                    $oResult = CMDBSource::Query($sSqlSearch." LIMIT " . $iMaxBufferSize);
                    //echo("\n Search anonymization: ".$sSqlSearch);
                    $aObjects = [] ;
                    if ($oResult->num_rows>0) {
                      while ($oRaw = $oResult->fetch_assoc()) {
                        $aObjects[] = $oRaw['id'];
                      }
                      $sSQL =$sSqlUpdate."WHERE id IN (".implode(', ', $aObjects).");";
                    //  echo("\n AnonymizationUpdate: ".$sSQL);
                      CMDBSource::Query($sSQL);
                   }
                   if (count($aObjects)<$iMaxBufferSize || (time() >= $iTimeLimit)) {
                      $bExecuteQuery=false;
                  }
            }
            return (count($aObjects)<$iMaxBufferSize);
        }
        ]]></code>
        </method>
        <method id="PurgeHistoryByBatch" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
        protected function PurgeHistoryByBatch( $iTimeLimit)
        {
        	// Delete any existing change tracking about the current object
        	$oFilter = new DBObjectSearch('CMDBChangeOp');
        	$oFilter->AddCondition('objclass', $this->Get('classToAnonymize'), '=');
        	$oFilter->AddCondition('objkey', $this->Get('idToAnonymize'), '=');
        	MetaModel::PurgeData($oFilter);

        	$oMyChangeOp = MetaModel::NewObject("CMDBChangeOpPlugin");
        	$oMyChangeOp->Set("objclass", $this->Get('classToAnonymize'));
        	$oMyChangeOp->Set("objkey", $this->Get('idToAnonymize'));
        	$oMyChangeOp->Set("description", 'Anonymization');
        	$iId = $oMyChangeOp->DBInsertNoReload();

           // Now remove the name of the contact from all the changes she/he made
           $sChangeTable = MetaModel::DBGetTable('CMDBChange');

           if (version_compare(ITOP_DESIGN_LATEST_VERSION , '3.0') < 0  || is_null($this->Get('idUserToAnonymize')) ) {
              $sSqlSearch = "SELECT id from `$sChangeTable` WHERE userinfo=".CMDBSource::Quote($this->Get('friendlynameToAnonymize'));
              $sSqlUpdate = "UPDATE `$sChangeTable` SET userinfo=".CMDBSource::Quote($this->Get('anonymizedFriendlyname'));
             $bFinish = $this->executeQueryByLot($sSqlSearch,$sSqlUpdate, $iTimeLimit);

	           if ( $bFinish ) {
		           $sSqlSearch = "SELECT id from `$sChangeTable` WHERE userinfo=".CMDBSource::Quote($this->Get('friendlynameToAnonymize').' (CSV)');
		           $sSqlUpdate = "UPDATE `$sChangeTable` SET userinfo=".CMDBSource::Quote($this->Get('anonymizedFriendlyname').' (CSV)');
		           $bFinish = $this->executeQueryByLot($sSqlSearch, $sSqlUpdate, $iTimeLimit);
	           }
               if($bFinish) {
                  $this->DBDelete();
                 $oScopeQuery = "SELECT BatchAnonymization WHERE idToAnonymize = :idToAnonymize ";
                 $oSet = new DBObjectSet(DBSearch::FromOQL($oScopeQuery, ['idToAnonymize'=>$this->Get('idToAnonymize')]));
                  if ($oSet->Count() === 0){
                      //end of anonymization mark person as anonymized
                    $oPerson = MetaModel::GetObject('Person', $this->Get('idToAnonymize'), true,true);
                    $oPerson->Set('anonymized', true); // Mark the Person as anonymized
                    $oPerson->DBWrite();
                  }
              }
           } else  {
              $sSqlSearch = "SELECT id from `$sChangeTable` WHERE user_id=". $this->Get('idUserToAnonymize');
              $sSqlUpdate = "UPDATE `$sChangeTable` SET userinfo=".CMDBSource::Quote($this->Get('anonymizedFriendlyname'));
              $bFinish = $this->executeQueryByLot($sSqlSearch,$sSqlUpdate, $iTimeLimit);

	           if ( $bFinish ) {
	           	    //remove data created before 3.0
                 $sSqlSearch = "SELECT id from `$sChangeTable` WHERE userinfo=".CMDBSource::Quote($this->Get('friendlynameToAnonymize')).' AND user_id IS NULL';
                 $sSqlUpdate = "UPDATE `$sChangeTable` SET userinfo=".CMDBSource::Quote($this->Get('anonymizedFriendlyname'));
                 $bFinish = $this->executeQueryByLot($sSqlSearch, $sSqlUpdate, $iTimeLimit);
	           }
	           if ( $bFinish ) {
                 $sSqlSearch = "SELECT id from `$sChangeTable` WHERE userinfo=".CMDBSource::Quote($this->Get('friendlynameToAnonymize').' (CSV)').' AND user_id IS NULL';
                 $sSqlUpdate = "UPDATE `$sChangeTable` SET userinfo=".CMDBSource::Quote($this->Get('anonymizedFriendlyname').' (CSV)');
                 $bFinish = $this->executeQueryByLot($sSqlSearch, $sSqlUpdate, $iTimeLimit);
	           }

              if($bFinish) {
                $this->DBDelete();
                $oScopeQuery = "SELECT BatchAnonymization WHERE idToAnonymize = :idToAnonymize ";
                $oSet = new DBObjectSet(DBSearch::FromOQL($oScopeQuery, ['idToAnonymize'=>$this->Get('idToAnonymize')]));
					      if ($oSet->Count() === 0){
					          //end of anonymization mark person as anonymized
					        $oPerson = MetaModel::GetObject('Person', $this->Get('idToAnonymize'), true,true);
                  $oPerson->Set('anonymized', true); // Mark the Person as anonymized
                  $oPerson->DBWrite();
					      }
              }
           }
        }
]]></code>
        </method>
        <method id="CleanupCaseLogsByBatch" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
        protected function CleanupCaseLogsByBatch($iTimeLimit)
        {
            $aCleanupCaseLog = MetaModel::GetConfig()->GetModuleSetting('combodo-anonymizer', 'caselog_content');

            // 1) Build the expression to search (and replace)
            $sPattern = ' : %1$s (%2$d) ============';
            $sEraser = str_repeat('*', strlen($this->Get('friendlynameToAnonymize'))); // replace the person's name by a string of stars... of the same length to preserver the case log's index
            $sSearch = sprintf($sPattern, $this->Get('friendlynameToAnonymize'), $this->Get('idUserToAnonymize'));

            $sSearchIdx = $this->Get('friendlynameToAnonymize');
            $sReplaceIdx =  str_repeat('*', strlen($this->Get('friendlynameToAnonymize')));

            if (in_array('friendlyname',$aCleanupCaseLog)){
                $sSearch1 = $this->Get('friendlynameToAnonymize');
                $sReplace1 = $sEraser;
            } else {
               $sSearch1 = sprintf($sPattern, $this->Get('friendlynameToAnonymize'), $this->Get('idUserToAnonymize'));
               $sReplace1 = sprintf($sPattern, $sEraser, $this->Get('idUserToAnonymize'));
            }
             $sStartReplace = "REPLACE(";
             $sEndReplace = ", ".CMDBSource::Quote($sSearch1).", ".CMDBSource::Quote($sReplace1).")";

            if (in_array('email',$aCleanupCaseLog)){
              $sSearch2 = $this->Get('emailToAnonymize');
              $sReplace2 = str_repeat('*', strlen($sSearch2));

               $sStartReplace = "REPLACE(".$sStartReplace;
               $sEndReplace = $sEndReplace.", ".CMDBSource::Quote($sSearch2).", ".CMDBSource::Quote($sReplace2).")";
            }

            if (in_array('name',$aCleanupCaseLog)){
               $sSearch3 = $this->Get('nameToAnonymize');
               $sReplace3 = str_repeat('*', strlen($sSearch3));

               $sStartReplace = "REPLACE(".$sStartReplace;
               $sEndReplace = $sEndReplace.", ".CMDBSource::Quote($sSearch3).", ".CMDBSource::Quote($sReplace3).")";
            }

            $bFinish = false;
            // 2) Find all classes containing case logs
            foreach(MetaModel::GetClasses() as $sClass)
            {
              foreach(MetaModel::ListAttributeDefs($sClass) as $sAttCode => $oAttDef)
              {
                $sTable = MetaModel::DBGetTable($sClass);
                if ((MetaModel::GetAttributeOrigin($sClass, $sAttCode) == $sClass) && $oAttDef instanceof AttributeCaseLog)
                {
                  $aSQLColumns = $oAttDef->GetSQLColumns();
                  $sColumn1 = array_keys($aSQLColumns)[0]; // We assume that the first column is the text
                  $sColumnIdx = array_keys($aSQLColumns)[1]; // We assume that the second column is the index

                  $sSqlSearch ="SELECT  id FROM `$sTable` WHERE `$sColumn1` LIKE ".CMDBSource::Quote('%'.$sSearch.'%');
                  $sSqlUpdate ="UPDATE `$sTable` SET `$sColumn1` = ".$sStartReplace."`$sColumn1`".$sEndReplace.",".
                                                                                " `$sColumnIdx` = REPLACE(`$sColumnIdx`, ".CMDBSource::Quote($sSearchIdx).", ".CMDBSource::Quote($sReplaceIdx).") ";
                  $bFinish = $this->executeQueryByLot($sSqlSearch,$sSqlUpdate, $iTimeLimit);
                  if (!$bFinish){
                  	//end of time
                  	return;
                  }
                }
              }
            }
             if($bFinish) {
                $this->DBDelete();
               $oScopeQuery = "SELECT BatchAnonymization WHERE idToAnonymize = :idToAnonymize ";
               $oSet = new DBObjectSet(DBSearch::FromOQL($oScopeQuery, ['idToAnonymize'=>$this->Get('idToAnonymize')]));
					      if ($oSet->Count() === 0){
					          //end of anonymization mark person as anonymized
					        $oPerson = MetaModel::GetObject('Person', $this->Get('idToAnonymize'), true,true);
                  $oPerson->Set('anonymized', true); // Mark the Person as anonymized
                  $oPerson->DBWrite();
					      }
            }
        }
]]></code>
        </method>
        <method id="CleanupOnMentionByBatch" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
        protected function CleanupOnMentionByBatch($iTimeLimit)
        {
            $sCleanupOnmention = MetaModel::GetConfig()->GetModuleSetting('combodo-anonymizer','onmention');
            $bFinish = true;
            if($sCleanupOnmention == 'trigger-only') {
	            $oScopeQuery = "SELECT TriggerOnObjectMention";
	            $oSet = new DBObjectSet(DBSearch::FromOQL($oScopeQuery, ['idToAnonymize'=>$this->Get('idToAnonymize')]));
	            while ($oTrigger = $oSet->Fetch()){
	               if ($bFinish) {
	                   $bFinish = $this->CleanupOnMentionInAClass($iTimeLimit, $oTrigger->Get('target_class'));
	                 }
                }
            } elseif ($sCleanupOnmention == 'all') {
               foreach(MetaModel::GetClasses() as $sClass) {
                 if ($bFinish) {
                   $bFinish = $this->CleanupOnMentionInAClass($iTimeLimit, $sClass);
                 }
              }
            }
            if($bFinish) {
              $this->DBDelete();
                 $oScopeQuery = "SELECT BatchAnonymization WHERE idToAnonymize = :idToAnonymize ";
                 $oSet = new DBObjectSet(DBSearch::FromOQL($oScopeQuery, ['idToAnonymize'=>$this->Get('idToAnonymize')]));
                  if ($oSet->Count() === 0){
                      //end of anonymization mark person as anonymized
                    $oPerson = MetaModel::GetObject('Person', $this->Get('idToAnonymize'), true,true);
                    $oPerson->Set('anonymized', true); // Mark the Person as anonymized
                    $oPerson->DBWrite();
                  }
            }
        }

]]></code>
        </method>
        <method id="CleanupOnMentionInAClass" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
        protected function CleanupOnMentionInAClass($iTimeLimit, $sClass)
        {
              $bFinish = false;
              $aMentionsAllowedClasses = MetaModel::GetConfig()->Get('mentions.allowed_classes');
              if (sizeof($aMentionsAllowedClasses) == 0 ){
                return true;
              }
               foreach(MetaModel::ListAttributeDefs($sClass) as $sAttCode => $oAttDef)
              {
                  $sTable = MetaModel::DBGetTable($sClass);
                  if ((MetaModel::GetAttributeOrigin($sClass, $sAttCode) == $sClass) && $oAttDef instanceof AttributeLongText)
                  {
                        $aSQLColumns = $oAttDef->GetSQLColumns();
                        $sColumn1 = array_keys($aSQLColumns)[0]; // We assume that the first column is the text

                        foreach($aMentionsAllowedClasses as $sMentionChar => $sMentionClass) {
                           if (MetaModel::IsParentClass('User',$sMentionClass)) {
                                $sSearch1 = 'class='.$sMentionClass.'&amp;id='.$this->Get('idUserToAnonymize').'">@';
                                $sSqlSearch ="SELECT  id FROM `$sTable` WHERE `$sColumn1` LIKE ".CMDBSource::Quote('%'.$sSearch1.'%');
                               /* function REGEXP_REPLACE available in mysql 8.0
                                $sRegexPatternToFind = $sSearch1."(.*?)</a>/i'";
                                $sReplaceableText = $sSearch1.CMDBSource::Quote($this->Get('anonymizedFriendlyname'))."</a>";
                                $sSqlUpdate = "UPDATE `$sTable` SET `$sColumn1` = REGEXP_REPLACE(`$sColumn1`,'".CMDBSource::Quote($sRegexPatternToFind)."','".CMDBSource::Quote($sReplaceableText)."')";
                               */
                                $sEndToFind = "</a>";
                                $sReplaceableText = $sSearch1.$this->Get('anonymizedFriendlyname');
                                $sSqlUpdate = "UPDATE `$sTable` SET `$sColumn1` =  CONCAT(SUBSTRING(`$sColumn1`, 1, LOCATE(".CMDBSource::Quote($sSearch1).", `$sColumn1`) - 1),".CMDBSource::Quote($sReplaceableText).", SUBSTRING(`$sColumn1`, LOCATE(".$sEndToFind.",`$sColumn1`,LOCATE(".CMDBSource::Quote($sSearch1).", `$sColumn1`))))";

                                $bFinish = $this->executeQueryByLot($sSqlSearch,$sSqlUpdate, $iTimeLimit);
                                if (!$bFinish){
                                     //end of time
                                    return $bFinish;
                                }
                           } else if (MetaModel::IsParentClass('Contact',$sMentionClass))  {
                                $sSearch1 = "class=".$sMentionClass."&amp;id=".$this->Get('idToAnonymize')."\">@";
                                $sSqlSearch = "SELECT id from `$sTable` WHERE `$sColumn1` LIKE ".CMDBSource::Quote('%'.$sSearch1.'%');
                                $sEndToFind = "'</a>'";
                                $sReplaceableText = $sSearch1.$this->Get('anonymizedFriendlyname');
                                $sSqlUpdate = "UPDATE `$sTable` SET `$sColumn1` =  CONCAT(SUBSTRING(`$sColumn1`, 1, LOCATE(".CMDBSource::Quote($sSearch1).", `$sColumn1`) - 1),".CMDBSource::Quote($sReplaceableText).", SUBSTRING(`$sColumn1`, LOCATE(".$sEndToFind.",`$sColumn1`,LOCATE(".CMDBSource::Quote($sSearch1).", `$sColumn1`))))";
                                $bFinish = $this->executeQueryByLot($sSqlSearch,$sSqlUpdate, $iTimeLimit);
	                              if (!$bFinish){
                                    //end of time
                                    return $bFinish;
	                              }
                           }
                        }
                    }
                }
                return $bFinish;
        }

]]></code>
        </method>
        <method id="CleanupEmailByBatch" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
        protected function CleanupEmailByBatch( $iTimeLimit)
        {
           $sEmailAnonymized = 'anonymous.contact'.$this->Get('idToAnonymize').'@anony.mized';
           $aCleanupEmail = (array) MetaModel::GetConfig()->GetModuleSetting('combodo-anonymizer','notification_content');
           if(sizeof($aCleanupEmail) == 0){
                $bFinish = true;
           } else {
             $sStartReplace = "";
             $sEndReplace = "";

             if (in_array('friendlyname',$aCleanupEmail)){
                 $sSearch1 = $this->Get('friendlynameToAnonymize');
                 $sReplace1 = $this->Get('anonymizedFriendlyname');

                 $sStartReplace = "REPLACE(";
                 $sEndReplace = ", ".CMDBSource::Quote($sSearch1).", ".CMDBSource::Quote($sReplace1).")";
              }

              if (in_array('email',$aCleanupEmail)){
                $sSearch2 = $this->Get('emailToAnonymize');
                $sReplace2 = 'anonymous.contact'.$this->Get('idToAnonymize').'@anony.mized';

                 $sStartReplace = "REPLACE(".$sStartReplace;
                 $sEndReplace = $sEndReplace.", ".CMDBSource::Quote($sSearch2).", ".CMDBSource::Quote($sReplace2).")";
              }

              if (in_array('name',$aCleanupEmail)){
                 $sSearch3 = $this->Get('nameToAnonymize');
                 $sReplace3 = "Contact ".$this->Get('idToAnonymize');

                 $sStartReplace = "REPLACE(".$sStartReplace;
                 $sEndReplace = $sEndReplace.", ".CMDBSource::Quote($sSearch3).", ".CMDBSource::Quote($sReplace3).")";
              }

             // Now change email adress
            $sNotificationTable = MetaModel::DBGetTable('EventNotificationEmail');

            $sSqlSearch = "SELECT id from `$sNotificationTable` WHERE `from` like '".$this->Get('emailToAnonymize')."'";
            $sSqlUpdate = "UPDATE `$sNotificationTable` SET  `from` = REPLACE(`to`, '".$this->Get('emailToAnonymize')."', '".$sEmailAnonymized."'),".
                                                                                 "  `subject` = ".$sStartReplace."`subject`".$sEndReplace.",".
                                                                                 "  `body` = ".$sStartReplace."`body`".$sEndReplace." ";
            $bFinish = $this->executeQueryByLot($sSqlSearch,$sSqlUpdate, $iTimeLimit);

             if ( $bFinish ) {
                $sSqlSearch = "SELECT id from `$sNotificationTable` WHERE `to` like '%".$this->Get('emailToAnonymize')."%'";
                $sSqlUpdate = "UPDATE `$sNotificationTable` SET  `to` = REPLACE(`to`, '".$this->Get('emailToAnonymize')."', '".$sEmailAnonymized."'),".
                                                                                 "  `subject` = ".$sStartReplace."`subject`".$sEndReplace.",".
                                                                                 "  `body` = ".$sStartReplace."`body`".$sEndReplace."";
                 $bFinish = $this->executeQueryByLot($sSqlSearch, $sSqlUpdate, $iTimeLimit);
            }

             if ( $bFinish ) {
                 $sSqlSearch = "SELECT id from `$sNotificationTable` WHERE `cc` like '%".$this->Get('emailToAnonymize')."%'";
                  $sSqlUpdate = "UPDATE `$sNotificationTable` SET  `cc` = REPLACE(`to`, '".$this->Get('emailToAnonymize')."', '".$sEmailAnonymized."'),".
                                                                                 "  `subject` = ".$sStartReplace."`subject`".$sEndReplace.",".
                                                                                 "  `body` = ".$sStartReplace."`body`".$sEndReplace." ";
                 $bFinish = $this->executeQueryByLot($sSqlSearch, $sSqlUpdate, $iTimeLimit);
            }

             if ( $bFinish ) {
                 $sSqlSearch = "SELECT id from `$sNotificationTable` WHERE `bcc` like '%".$this->Get('emailToAnonymize')."%'";
                  $sSqlUpdate = "UPDATE `$sNotificationTable` SET  `bcc` = REPLACE(`to`, '".$this->Get('emailToAnonymize')."', '".$sEmailAnonymized."'),".
                                                                                 "  `subject` = ".$sStartReplace."`subject`".$sEndReplace.",".
                                                                                 "  `body` = ".$sStartReplace."`body`".$sEndReplace." ";
                 $bFinish = $this->executeQueryByLot($sSqlSearch, $sSqlUpdate, $iTimeLimit);
            }
	       }

          if($bFinish) {
               $this->DBDelete();
               $oScopeQuery = "SELECT BatchAnonymization WHERE idToAnonymize = :idToAnonymize ";
               $oSet = new DBObjectSet(DBSearch::FromOQL($oScopeQuery, ['idToAnonymize'=>$this->Get('idToAnonymize')]));
					      if ($oSet->Count() === 0){
					          //end of anonymization mark person as anonymized
					        $oPerson = MetaModel::GetObject('Person', $this->Get('idToAnonymize'), true,true);
                  $oPerson->Set('anonymized', true); // Mark the Person as anonymized
                  $oPerson->DBWrite();
					      }
          }
        }
]]></code>
        </method>
      </methods>
      <presentation>
        <list>
          <items>
            <item id="classToAnonymize">
              <rank>10</rank>
            </item>
            <item id="idToAnonymize">
              <rank>20</rank>
            </item>
            <item id="idUserToAnonymize">
              <rank>30</rank>
            </item>
            <item id="friendlynameToAnonymize">
              <rank>40</rank>
            </item>
            <item id="emailToAnonymize">
              <rank>50</rank>
            </item>
            <item id="function">
              <rank>60</rank>
            </item>
          </items>
        </list>
      </presentation>
    </class>
    <class id="Person">
      <properties>
        <uniqueness_rules>
          <rule id="name" _delta="must_exist">
            <filter _delta="redefine" ><![CDATA[anonymized = 0]]></filter>
          </rule>
        </uniqueness_rules>
      </properties>
      <fields>
        <field id="anonymized" xsi:type="AttributeBoolean" _delta="define">
          <sql>anonymized</sql>
          <is_null_allowed>false</is_null_allowed>
          <default_value>0</default_value>
        </field>
      </fields>
      <methods>
        <method id="Anonymize" _delta="define">
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
        public function Anonymize()
        {
          $sPersonFriendlyName = $this->GetName();
          $sEmail = $this->Get('email');
          $sNameToAnonymize = $this->Get('name');

          // Cleanup all non mandatory values
          foreach(MetaModel::ListAttributeDefs(get_class($this)) as $sAttCode => $oAttDef)
          {
            if (!$oAttDef->IsWritable()) continue;

            if ($oAttDef->IsScalar())
            {
              if (!$oAttDef->IsNullAllowed())
              {
                // Try to put the default value is a suitable one exists
                $value = $oAttDef->GetDefaultValue($this);
                if (!$oAttDef->IsNull($value))
                {
                  $this->Set($sAttCode, $value);
                }
              }
              else
              {
                $this->Set($sAttCode, null);
              }
            }
            else if ($oAttDef instanceof AttributeLinkedSetIndirect)
            {
              $oValue = DBObjectSet::FromScratch($oAttDef->GetLinkedClass());
              $this->Set($sAttCode, $oValue);
            }
          }

          // Put some more fancy values
          $this->SetAnonymousValues();

          //TODO when min iTop Version > 3.0 : save person after the purge of his data
          // actually in case of error during purge, person is already anonymized and it isn't possible to restart the processus
          // in 2.7 we can't get anonymized friendlyname whitout save object
          //persons are marked as anonymized later when all the process is finish

          // Write the object
         $this->AllowWrite(true);
         $this->DBWrite();

          $this->Reload();
          $sAnonymizedFriendlyname = $this->GetName();

           //desactivate linked user
	        $oValues = ['classToAnonymize' => get_class($this),
                        'idToAnonymize' => $this->GetKey(),
                        'idUserToAnonymize' => null,
                        'friendlynameToAnonymize' => $sPersonFriendlyName,
                        'anonymizedFriendlyname' => $sAnonymizedFriendlyname,
                        'nameToAnonymize' =>  $sNameToAnonymize,
                        'emailToAnonymize' => $sEmail];
          $bUserExist = false;
          $oSearch = new DBObjectSearch('User');
          $oSearch->AddCondition('contactid', $this->GetKey());
          $oSet = new DBObjectSet($oSearch);
          $iNbUser = 0;
          while($oUser = $oSet->Fetch())
          {
	          $oUser->Set('status', 'disabled');
	          if ($iNbUser == 0) {
	              $oUser->Set('login', 'Anonymous'.$this->GetKey());
	          }  else {
	              $oUser->Set('login', 'Anonymous'.$this->GetKey().'-'.$iNbUser);
	          }
	          $oUser->AllowWrite(true);
	          $oUser->DBUpdate();

	          $bUserExist = true;
            $oValues [  'idUserToAnonymize'] = $oUser->GetKey();

            // Purge the history for this object, otherwise previous values can be retrieved from the history
            $oValues['function'] =  'PurgeHistoryByBatch';
            $oBatchAnonymization = MetaModel::NewObject("BatchAnonymization",$oValues);
	          $oBatchAnonymization->DBInsertNoReload();

            // Cleanup all references to the Person's name as an author of a case log entry
	          $oValues['function'] =  'CleanupCaseLogsByBatch';
            $oBatchAnonymization = MetaModel::NewObject("BatchAnonymization",$oValues);
	          $oBatchAnonymization->DBInsertNoReload();

            if (version_compare(ITOP_DESIGN_LATEST_VERSION , '3.0') >= 0) {
              $oValues['function'] =  'CleanupOnMentionByBatch';
              $oBatchAnonymization = MetaModel::NewObject("BatchAnonymization",$oValues);
              $oBatchAnonymization->DBInsertNoReload();
	          }

	          if (!empty($sEmail)){
              $oValues['function'] =  'CleanupEmailByBatch';
              $oBatchAnonymization = MetaModel::NewObject("BatchAnonymization",$oValues);
              $oBatchAnonymization->DBInsertNoReload();
	          }
	          $iNbUser++;
          }

          if (!$bUserExist) {
            // Purge the history for this object, otherwise previous values can be retrieved from the history
            $oValues['function'] =  'PurgeHistoryByBatch';
	          $oBatchAnonymization = MetaModel::NewObject("BatchAnonymization",$oValues);
	          $oBatchAnonymization->DBInsertNoReload();
            if (version_compare(ITOP_DESIGN_LATEST_VERSION , '3.0') >= 0) {
                $oValues['function'] =  'PurgeOnMentionByBatch';
                $oBatchAnonymization = MetaModel::NewObject("BatchAnonymization",$oValues);
                $oBatchAnonymization->DBInsertNoReload();
	          }

	          if (!empty($sEmail)){
              $oValues['function'] =  'PurgeEmailByBatch';
              $oBatchAnonymization = MetaModel::NewObject("BatchAnonymization",$oValues);
              $oBatchAnonymization->DBInsertNoReload();
	          }
          }

        }
]]></code>
        </method>
        <method id="SetAnonymousValues" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
        public function SetAnonymousValues()
        {
          // Put some more fancy values
          $this->Set('name', Dict::S('Anonymization:Person:name').' '.$this->GetKey());
          $this->Set('first_name', Dict::S('Anonymization:Person:first_name'));
          $this->Set('email', '');
          // Mark the contact as obsolete
          $this->Set('status', 'inactive');
          $this->Set('picture',null);
        }

]]></code>
        </method>
      </methods>
    </class>
  </classes>
  <menus>
  </menus>
  <user_rights>
    <groups>
      <group id="RessourceAnonymizationGroup">
        <classes>
          <class id="RessourceAnonymization"/>
          <class id="BatchAnonymization"/>
        </classes>
      </group>
      <group id="RessourcePersonGroup">
        <classes>
          <class id="Location"/>
          <class id="Organization"/>
          <class id="Contact"/>
        </classes>
      </group>
    </groups>
    <profiles>
      <profile id="52" _delta="define">
        <name>Anonymization Agent</name>
        <description>Person in charge of anonymization. Must be used in conjunction with other profiles (e.g. Configuration Manager, Service Manager,…).</description>
        <groups>
          <group id="RessourceAnonymizationGroup">
            <actions>
              <action id="action:read">allow</action>
              <action id="action:bulk read">allow</action>
              <action id="action:write">allow</action>
              <action id="action:bulk write">allow</action>
            </actions>
          </group>
          <group id="RessourcePersonGroup">
            <actions>
              <action id="action:read">allow</action>
              <action id="action:bulk read">allow</action>
            </actions>
          </group>
        </groups>
      </profile>
    </profiles>
  </user_rights>
  <dictionaries>
    <dictionary id="EN US">
      <entries>
        <entry id="Class:Person/Attribute:anonymized" _delta="define"><![CDATA[Anonymized?]]></entry>
      </entries>
    </dictionary>
    <dictionary id="FR FR">
      <entries>
        <entry id="Class:Person/Attribute:anonymized" _delta="define"><![CDATA[Anonymisé ?]]></entry>
      </entries>
    </dictionary>
  </dictionaries>
</itop_design>
