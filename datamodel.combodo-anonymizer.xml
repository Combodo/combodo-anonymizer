<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  version="1.0">
  <constants>
  </constants>
  <classes>
    <class id="Person">
      <fields>
      <field id="anonymized" xsi:type="AttributeBoolean" _delta="define">
        <sql>anonymized</sql>
        <is_null_allowed>false</is_null_allowed>
        <default_value>0</default_value>
      </field>
      </fields>
      <methods>
        <method id="Anonymize" _delta="define">
          <static>false</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
        public function Anonymize()
        {
          $sPersonFriendlyName = $this->GetName();
          
          // Cleanup all non mandatory values
          foreach(MetaModel::ListAttributeDefs(get_class($this)) as $sAttCode => $oAttDef)
          {
            if (!$oAttDef->IsWritable()) continue;
            
            if ($oAttDef->IsScalar())
            {
              if (!$oAttDef->IsNullAllowed())
              {
                // Try to put the default value is a suitable one exists
                $value = $oAttDef->GetDefaultValue($this);
                if (!$oAttDef->IsNull($value))
                {
                  $this->Set($sAttCode, $value);
                }
              }
              else
              {
                $this->Set($sAttCode, null);
              }
            }
            else if ($oAttDef instanceof AttributeLinkedSetIndirect)
            {
              $oValue = DBObjectSet::FromScratch($oAttDef->GetLinkedClass());
              $this->Set($sAttCode, $oValue);
            }
          }
        
          // Put some more fancy values
          $this->SetAnonymousValues();
          
          // Write the object
          $this->Set('anonymized', true); // Mark the Person as anonymized
          $this->DBWrite();
          
          $this->Reload();
          $sAnonymizedName = $this->GetName();
          
          // Purge the history for this object, otherwise previous values can be retrieved from the history
          $this->PurgeHistory($sPersonFriendlyName, $sAnonymizedName);
          
          // Cleanup all references to the Person's name as an author of a case log entry
          $this->CleanupCaseLogs($sPersonFriendlyName);
        }
]]></code>
        </method>
        <method id="PurgeHistory" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
        protected function PurgeHistory($sOriginalName, $sAnonymizedName)
        {
        	$sRootClass = MetaModel::GetRootClass(get_class($this));
        	
        	// Delete any existing change tracking about the current object
        	$oFilter = new DBObjectSearch('CMDBChangeOp');
        	$oFilter->AddCondition('objclass', get_class($this), '=');
        	$oFilter->AddCondition('objkey', $this->GetKey(), '=');
        	MetaModel::PurgeData($oFilter);
        	
        	$oMyChangeOp = MetaModel::NewObject("CMDBChangeOpPlugin");
        	$oMyChangeOp->Set("objclass", get_class($this));
        	$oMyChangeOp->Set("objkey", $this->GetKey());
        	$oMyChangeOp->Set("description", 'Anonymization');
        	$iId = $oMyChangeOp->DBInsertNoReload();
          
            // Now remove the name of the contact from all the changes she/he made
            $sChangeTable = MetaModel::DBGetTable('CMDBChange');
            $sSQL = "UPDATE `$sChangeTable` SET userinfo=".CMDBSource::Quote($sAnonymizedName)." WHERE userinfo=".CMDBSource::Quote($sOriginalName);
IssueLog::Info('Anonymization: '.$sSQL);
            CMDBSource::Query($sSQL);
        }
]]></code>
        </method>
        <method id="CleanupCaseLogs" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
        protected function CleanupCaseLogs($sPersonFriendlyName)
        {
          // 1) Build the expression to search (and replace)
          $sPattern = ' : %1$s (%2$d) ============';
          $sEraser = str_repeat('*', strlen($sPersonFriendlyName)); // replace the person's name by a string of stars... of the same length to preserver the case log's index
          
          $sSearch = sprintf($sPattern, $sPersonFriendlyName, $this->GetKey());
          $sReplace = sprintf($sPattern, $sEraser, $this->GetKey());
          
          // 2) Find all classes containing case logs
          foreach(MetaModel::GetClasses() as $sClass)
          {
            foreach(MetaModel::ListAttributeDefs($sClass) as $sAttCode => $oAttDef)
            {
              $sTable = MetaModel::DBGetTable($sClass);
              if ((MetaModel::GetAttributeOrigin($sClass, $sAttCode) == $sClass) && $oAttDef instanceof AttributeCaseLog)
              {
                $aSQLColumns = $oAttDef->GetSQLColumns();
                $sColumn = array_keys($aSQLColumns)[0]; // We assume that the first column is the text (the second one is the index)
                
                $sSQL = "UPDATE `$sTable` SET `$sColumn` = REPLACE(`$sColumn`, ".CMDBSource::Quote($sSearch).", ".CMDBSource::Quote($sReplace).") WHERE `$sColumn` LIKE ".CMDBSource::Quote('%'.$sSearch.'%')."";
                CMDBSource::Query($sSQL);
              }
            }
          }
        }
]]></code>
        </method>
        <method id="SetAnonymousValues" _delta="define">
          <static>false</static>
          <access>protected</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[
        public function SetAnonymousValues()
        {
          // Put some more fancy values
          $this->Set('name', Dict::S('Anonymization:Person:name'));
          $this->Set('first_name', Dict::S('Anonymization:Person:first_name'));
          // Mark the contact as obsolete
          $this->Set('status', 'inactive');
        }

]]></code>
        </method>
      </methods>
    </class>
  </classes>
  <menus>
  </menus>
  <user_rights>
    <groups>
    </groups>
    <profiles>
    </profiles>
  </user_rights>
  <dictionaries>
    <dictionary id="EN US">
      <entries>
        <entry id="Class:Person/Attribute:anonymized" _delta="define"><![CDATA[Anonymized?]]></entry>
      </entries>
    </dictionary>
    <dictionary id="FR FR">
      <entries>
        <entry id="Class:Person/Attribute:anonymized" _delta="define"><![CDATA[AnonymisÃ© ?]]></entry>
      </entries>
    </dictionary>
  </dictionaries>
</itop_design>
